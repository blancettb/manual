{
  "name": "Connection usage has high ratio",
  "description": "This detector monitors all the members of MongoDB Replica Sets and identifies if the replication lag is increasing too fast.",
  "type": "MANUAL",
  "tags": [
     ""
  ],
  "fields": [
    {
        "name": "content",
        "description": "Content for manual action",
        "encoding": "base64",
        "value": " 1. Check for Slow Queries: Slow queries can significantly impact the connection usage ratio. You can use the command `db.runCommand({ slowQueryLogging: 1 })` to enable slow query logging. After enabling this feature, analyze the logs to identify and optimize slow-performing queries.
2. Adjust Tailable Cursor Threshold: The tailable cursor threshold determines how many documents are fetched when using a tailable cursor. If set too high, it can lead to increased connection usage. You can adjust this value by modifying the `maxAwaitTimeMS` parameter in the MongoDB configuration file. A lower value will reduce the number of connections used.
3. Monitor Replication Lag: High replication lag can also contribute to high connection usage. Regularly monitor the replication lag to ensure that it remains within an acceptable range. You can use the command `rs.status()` to view the current status of your MongoDB replica set.
4. Optimize Data Layout: In some cases, an inefficient data layout can lead to increased connection usage. You can optimize the data layout by reorganizing the way data is stored and accessed. This may involve creating more efficient indexes, sharding, or partitioning the data.
5. Limit Client Connections: If necessary, limit the number of client connections to the MongoDB server. This can help prevent overloading the system and reducing the connection usage ratio. You can modify the maximum number of connections allowed by editing the `connectionMaxWaitQueueSize` parameter in the MongoDB configuration file.
6. Update MongoDB Version: If none of the above steps resolve the issue, consider updating to a newer version of MongoDB. Newer versions often include performance improvements and bug fixes that could help address the high connection usage ratio problem.

By following these steps, you should be able to resolve the high connection usage ratio issue in your MongoDB Replica Set.",
        "secured": false
    }
],
  "staticId": "containerCPUDebug",
  "metadata": {
    "ai": [
      {
        "algorithm": "watsonx",
        "events": ["IunBdzvHdJX0JkZl6ngKlVhTABg"]
      }
    ]
  }
}