{
  "name": "Perm Gen is full (CMS)",
  "description": "This detector establishes a processing pipeline to detect the maximum Perm Gen CMS Pools utilized.",
  "type": "MANUAL",
  "tags": [
    "container",
    "docker",
    "podman",
    "cpu",
    "diagnostic",
    "watsonx"
  ],
  "fields": [
    {
        "name": "content",
        "description": "Content for manual action",
        "encoding": "base64",
        "value": " 1. Increase the Perm Gen space size by setting the -XX:MaxPermSize parameter in the JVM arguments. The default value is typically 64MB, but you can increase it to 512MB or even higher depending on your application's requirements.
2. If increasing the Perm Gen space size does not help, consider reducing the number of concurrent threads using the -XX:ParallelGCThreads parameter. A lower value, such as 2 or 4, can help reduce the pressure on Perm Gen.
3. You can also disable the CMS garbage collector entirely and use the G1 garbage collector, which is known for its ability to handle large perm gen spaces effectively. To do this, set the -XX:+UseG1GC command-line option. However, note that G1 GC has more complex configuration settings compared to CMS.
4. Monitor the Perm Gen space usage over time and adjust the JVM arguments accordingly. It might be necessary to make incremental changes to avoid overwhelming the Perm Gen space.

By following these steps, you can optimize the Java Garbage Collection process and prevent Perm Gen CMS Pools from becoming full.

For more information on tuning Java Garbage Collection parameters, refer to the Oracle Java SE Documentation: <https://docs.oracle.com/en/java/javase/17/jdk/garbage-collector-tuning.htm>

If you have any further questions or need additional assistance, please let me know.",
        "secured": false
    }
],
  "staticId": "containerCPUDebug",
  "metadata": {
    "ai": [
      {
        "algorithm": "watsonx",
        "events": ["tL5FhoOrMPOVtyL9qEKQ-hEJANk"]
      }
    ]
  }
}